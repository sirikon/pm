#!/usr/bin/env python3
import glob
import os

DENO_CONF_FLAGS = [
    '--import-map', './src/import_map.json',
    '--lock', './src/lock.json',
]
DENO_EXEC_FLAGS = ['-A']
DENO_COMP_FLAGS = ['--unstable', '--cached-only']

ENTRY_FILE = os.path.join(os.getcwd(), 'src/main.ts')
TEST_FILES = glob.glob(os.path.join(
    os.getcwd(), 'src/**/*.test.ts'), recursive=True)


def cli():

    @command
    def install():
        cmd('deno', 'cache',
            *DENO_CONF_FLAGS, '--reload',
            ENTRY_FILE, *TEST_FILES)

    @command
    def lock():
        cmd('deno', 'cache',
            *DENO_CONF_FLAGS, '--lock-write',
            ENTRY_FILE, *TEST_FILES)

    @command
    def run():
        cmd('deno', 'run',
            *DENO_CONF_FLAGS,
            *DENO_COMP_FLAGS,
            *DENO_EXEC_FLAGS,
            ENTRY_FILE)

    @command
    def test():
        cmd('deno', 'test',
            *DENO_CONF_FLAGS,
            *TEST_FILES)

    @command
    def build():
        cmd('rm', '-rf', 'dist')
        cmd('mkdir', '-p', 'dist')
        cmd('deno', 'compile',
            *DENO_CONF_FLAGS,
            *DENO_COMP_FLAGS,
            *DENO_EXEC_FLAGS,
            '--output', 'dist/pm',
            ENTRY_FILE)





# fmt: off
# https://gist.github.com/sirikon/d4327b6cc3de5cc244dbe5529d8f53ae
import inspect, sys, os, subprocess; os.chdir(os.path.dirname(__file__));commands = []
def cmd(*args, **kwargs): subprocess.run(args, **kwargs, check=True)
def spec(f): return inspect.getfullargspec(f)
def command(func): commands.append(func); return func
cli(); args = sys.argv[1:]
if len(args) == 0: print("Available commands:"); [print(' '.join([
    f' {f.__name__}',
    *[f'<{a}>' for a in spec(f).args],
    *([f'<...{spec(f).varargs}>'] if spec(f).varargs is not None else [])
])) for f in commands]; exit(0)
matching_commands = [f for f in commands if f.__name__ == args[0]]
if len(matching_commands) == 0: print(f'Unknown command "{args[0]}"');sys.exit(1)
try: matching_commands[0](*args[1:])
except KeyboardInterrupt: pass
except subprocess.CalledProcessError as err: sys.exit(err.returncode)
